// #include <usbhid.h>
// #include <usbhub.h>
// #include <hiduniversal.h>
// #include <hidboot.h>

// class MyParser : public HIDReportParser {
//   public:
//     MyParser();
//     void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);
//   protected:
//     uint8_t KeyToAscii(bool upper, uint8_t mod, uint8_t key);
//     virtual void OnKeyScanned(bool upper, uint8_t mod, uint8_t key);
//     virtual void OnScanFinished();
// };
// MyParser::MyParser(){}
// void MyParser::Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf) {
//   // If error or empty, return
//  // if (buf[2] == 1 || buf[2] == 0) return;

//   for (uint8_t i = 15; i >= 2; i--) {
//     // If empty, skip
//     if (buf[i] == 0) continue;

//     // If enter signal emitted, scan finished
//     if (buf[i] == UHS_HID_BOOT_KEY_ENTER) {
//       OnScanFinished();
//     }

//     // If not, continue normally
//     else {
//       // If bit position not in 2, it's uppercase words
//       OnKeyScanned(i > 2, *buf, buf[i]);
//     }

//     return;
//   }
// }

// uint8_t MyParser::KeyToAscii(bool upper, uint8_t mod, uint8_t key) {
//   // Letters
//   if (VALUE_WITHIN(key, 0x04, 0x1d)) {
//     if (upper) return (key - 4 + 'A');
//     else return (key - 4 + 'a');
//   }

//   // Numbers
//   else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
//     return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
//   }

//   return 0;
// }

// void MyParser::OnKeyScanned(bool upper, uint8_t mod, uint8_t key) {
//   uint8_t ascii = KeyToAscii(upper, mod, key);
//   // hasil = hasil + (char)ascii;
//   Serial.print((char)ascii);
// }

// void MyParser::OnScanFinished() {

// }

// USB          Usb;
// //USBHub       Hub(&Usb);
// HIDBoot<USB_HID_PROTOCOL_KEYBOARD>    Hid(&Usb);
// MyParser     Parser;

// void setup()
// {
//   Serial.begin(9600);
//   if (Usb.Init() == -1) {
//     Serial.println("OSC did not start.");
//   }
//   delay(200);
//   Hid.SetReportParser(0, &Parser);
// }

// void loop()
// {
//   Usb.Task();
// }


// #include <hidboot.h>
// #include <usbhub.h>

// // Satisfy the IDE, which needs to see the include statment in the ino too.
// #ifdef dobogusinclude
// #include <spi4teensy3.h>
// #endif
// #include <SPI.h>

// class KbdRptParser : public KeyboardReportParser
// {
//   protected:
//     void OnKeyDown	(uint8_t mod, uint8_t key);
//     void OnKeyPressed(uint8_t key);
// };

// void KbdRptParser::OnKeyDown(uint8_t mod, uint8_t key)
// {
//   uint8_t c = OemToAscii4Barcode(mod, key);
//   if (c)
//     OnKeyPressed(c);
// }

// void KbdRptParser::OnKeyPressed(uint8_t key)
// {
//   Serial.print((char)key);
//   if(key == 0x28) Serial.println("done");
// };

// USB     Usb;
// //USBHub     Hub(&Usb);
// HIDBoot<USB_HID_PROTOCOL_KEYBOARD>    HidKeyboard(&Usb);
// KbdRptParser Prs;
#include "barcode_scanner.h"
// #include <WiFi.h>
// #define 

void setup()
{

  Serial.begin( 115200 );
  if (Usb.Init() == -1)
    Serial.println("OSC did not start.");
  
  delay( 200 );
  HidKeyboard.SetReportParser(0, &Prs);

}

void loop()
{
  Usb.Task();
}

